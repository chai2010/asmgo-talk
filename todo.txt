重点部分：

函数的参数

函数的返回值

函数的调用关系，父子环境的FP/SP变化

局部变量图

PCDATA和FUNCDATA是否好用图片表达？


ieee754 结构

init-packages 顺序的图

-----


画图

全局变量和heap变量
参考 func 的图

函数的调用关系
父子关系中，各自的参数需要表达，有2个栈帧，可以参考 网上一个 pdf 的图，image目录有类似

还有几个图：全局var的，声明/汇编定义/初始化/内存 几个的关系

函数调用，父子关系

ImageMagick 图像加水印


nosplit 也需要一个图进行对比

ditaa 不能显示特殊符号 = + - <= >= ==

https://github.com/stathissideris/ditaa/issues/9

全角的英文单词和符号，不过ditaa并不能识别非ASCII字符
https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms

函数的参数图

函数的局部变量图
调用其他函数的临时变量和返回值

PCDATA和FUNCDATA是否好用图片表达？

----

argsize/framesize 最大值多大
nosplit 时，调用者如何包装 stack 够大

栈分裂时的检测代码只是判断SP，那么调用函数后，framesize如果比较大，
依然可能导致栈溢出，如何避免

nosplit函数是否可以调用其他函数，调用非nosplit函数？

https://golang.org/cmd/compile/#hdr-Compiler_Directives

---

https://github.com/golang/go/issues/14319
nosplit stack overflow

https://golang.org/test/nosplit.go

https://golang.org/src/cmd/link/internal/ld/lib.go
stkbroke

StackLimit
https://godoc.org/cmd/internal/objabi

https://golang.org/src/cmd/internal/objabi/stack.go

到越界会有 StackLimit 752 字节的空间，但是有些其他函数需要使用一些空间

或许是stack本身还有足够的空间导致

如果stack足够大，那么会大于752字节空间


//go:noinine
//go:nosplit
func foo() {
	var a [752]byte
	a[0] = 1
}

崩的原理是什么？

是否可以理解为，运行阶段是无法保证nosplit函数栈溢出问题？

a[0] 越界有可能重叠到某个全局变量的地址位置

那暂时假设128是安全的

----

函数调用画法：

memery分2个frame段，然后错开后展开 args/return 部分，local 部分，投影出 被调用函数段 args/return/local var/call args

一个函数有4个部分： args/return/local var/call args
args/return合并为1个，就是3个部分

函数段组成：名字/代码/栈
栈中数据3个部分：参数/返回值/局部变量
但是汇编中也是3个部分，不一样，参数和返回值/局部变量/调用其他函数的空间

//go:nosplit
func main() {
	printsum(1, 2)
}

//go:nosplit
func printsum(a, b int) {
	var c = sum(a, b)
	print(c)
}

//go:nosplit
func sum(a, b int) int {
	return a+b
}

TEXT ·main(SB), NOSPLIT, $16-0
	MOVQ $1, +0(SP)
	MOVQ $2, +8(SP)
	call ·printsum(SB),

TEXT ·printsum(SB), NOSPLIT, $32-$16
	MOVQ a-0(FP), AX // AX = a
	MOVQ b-8(FP), BX // BX = b

	MOVQ AX, +0(SP)       // sum:arg:AX
	MOVQ BX, +8(SP)       // sum:arg:BX
	CALL ·sum(SB)         // call sum

	MOVQ +16(SP), CX      // CX = sum(AX, BX)
	MOVQ +24(SP), c-8(SP) // c = CX

	MOVQ c-8(SP), AX          // AX = c
	MOVQ AX, +0(SP)           // print:arg:AX
	call runtime·printint(SB) // call print

	RET

TEXT ·sum(SB), NOSPLIT, $0
	MOVQ a-24(SP), AX // AX = a
	MOVQ b-16(SP), BX // BX = b

	MOVQ AX, BX       // BX = AX + BX
	MOVQ BX, ret+24(FP)
	RET
